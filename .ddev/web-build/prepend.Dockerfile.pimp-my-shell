#ddev-generated

# ahoy
FROM alpine AS pimp-my-shell-ahoy
RUN <<EOF
set -eux
AHOY_VERSION=2.4.0
AARCH=$(uname -m)
AARCH=${AARCH/aarch64/arm64}
AARCH=${AARCH/x86_64/amd64}
wget -q https://github.com/ahoy-cli/ahoy/releases/download/v${AHOY_VERSION}/ahoy-bin-linux-${AARCH} -O - > /usr/local/bin/ahoy
chmod +x /usr/local/bin/ahoy
EOF

# startship
FROM alpine AS pimp-my-shell-starship
RUN <<EOF
set -eux
STARSHIP_VERSION=1.23.0
AARCH=$(uname -m)
AARCH=${AARCH/i386/i686}
wget -q https://github.com/starship/starship/releases/download/v${STARSHIP_VERSION}/starship-${AARCH}-unknown-linux-musl.tar.gz -O - | tar -zxf - -C /usr/local/bin
EOF

# gum
FROM alpine AS pimp-my-shell-gum
RUN <<EOF
set -eux
GUM_VERSION=0.16.0
AARCH=$(uname -m)
AARCH=${AARCH/aarch64/arm64}
AARCH=${AARCH/i686/i386}
wget -q https://github.com/charmbracelet/gum/releases/download/v${GUM_VERSION}/gum_${GUM_VERSION}_Linux_${AARCH}.tar.gz -O - | tar -zxf - --strip-components=1 -C /opt
EOF

# fzf
FROM alpine AS pimp-my-shell-fzf
RUN <<EOF
set -eux
FZF_VERSION=0.62.0
AARCH=$(uname -m)
AARCH=${AARCH/aarch64/arm64}
AARCH=${AARCH/x86_64/amd64}
wget -q https://github.com/junegunn/fzf/releases/download/v${FZF_VERSION}/fzf-${FZF_VERSION}-linux_${AARCH}.tar.gz -O - | tar -zxf - -C /usr/local/bin
EOF

# fzf-git.sh
FROM alpine AS pimp-my-shell-fzfgit
RUN <<EOF
FZFGIT_SHA1=3ec3e97d1cc75ec97c0ab923ed5aa567aee01a5e
wget https://raw.githubusercontent.com/junegunn/fzf-git.sh/${FZFGIT_SHA1}/fzf-git.sh -O /opt/fzf-git.sh
EOF

# eza
FROM alpine AS pimp-my-shell-eza
RUN <<EOF
set -eux
EZA_VERSION=0.21.3
wget -q https://github.com/eza-community/eza/releases/download/v${EZA_VERSION}/eza_`uname -m`-unknown-linux-gnu.tar.gz -O- | tar -zxf - -C /usr/local/bin
wget https://github.com/eza-community/eza/releases/download/v${EZA_VERSION}/completions-${EZA_VERSION}.tar.gz -O eza-completions.tar.gz
tar -xzf eza-completions.tar.gz --strip-components=3 -C /opt ./target/completions-${EZA_VERSION}/eza
tar -xzf eza-completions.tar.gz --strip-components=3 -C /opt ./target/completions-${EZA_VERSION}/eza.fish
rm eza-completions.tar.gz
EOF

# fish
#
# Opensuse doesn't keep older files of the fish build, so this will always use
# the latest regardless of the fish version specified below in the
# `apt satisfy` command. However, this allows for proper docker build cache
# busting ensuring you always have the last version when it's updated.
FROM $BASE_IMAGE AS pimp-my-shell-fish
SHELL ["/bin/bash", "-c"]
RUN <<EOF
set -eux
FISH_VERSION=4.0.2-2
DEBIAN=$(lsb_release -rs)
echo "deb http://download.opensuse.org/repositories/shells:/fish:/release:/4/Debian_${DEBIAN}/ /" | sudo tee /etc/apt/sources.list.d/shells:fish:release:4.list
curl -fsSL https://download.opensuse.org/repositories/shells:fish:release:4/Debian_${DEBIAN}/Release.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/shells_fish_release_4.gpg > /dev/null
apt update
apt -o APT::Install-Recommends=false satisfy -y "fish (>=${FISH_VERSION})"
rm -rf /var/lib/apt/lists/*
EOF

FROM pimp-my-shell-fish AS pimp-my-shell-fisher
SHELL ["/bin/fish", "-c"]
RUN <<EOF
set fish_trace 1
export FISHER_VERSION=4.4.5
curl -fLo /tmp/fisher.fish --retry 3 --retry-delay 2 https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish
source /tmp/fisher.fish
fisher install jorgebucaran/fisher@$FISHER_VERSION
rm /tmp/fisher.fish
EOF

FROM pimp-my-shell-fisher AS pimp-my-shell-tide
SHELL ["/bin/fish", "-c"]
RUN <<EOF
set fish_trace 1
export TIDE_VERSION=6.1.1
fisher install IlanCosman/tide@v$TIDE_VERSION
EOF

FROM pimp-my-shell-fisher AS pimp-my-shell-bass
SHELL ["/bin/fish", "-c"]
RUN <<EOF
set fish_trace 1
export BASS_VERSION=1.0
fisher install edc/bass@v$BASS_VERSION
EOF

#z.lua
FROM alpine AS pimp-my-shell-zlua
RUN <<EOF
set -eux
ZLUA_VERSION=1.8.20
mkdir -p /opt/z.lua
cd /opt/z.lua
wget https://github.com/skywind3000/z.lua/archive/refs/tags/${ZLUA_VERSION}.zip -O zlua.zip
unzip zlua.zip
mv z.lua-${ZLUA_VERSION} z.lua
rm zlua.zip
EOF

#xterm-kitty
FROM alpine AS pimp-my-shell-xterm-kitty
RUN <<EOF
set -eux
KITTY_VERSION=0.41.1
url="https://github.com/kovidgoyal/kitty/raw/refs/tags/v${KITTY_VERSION}/terminfo/x/xterm-kitty"
mkdir -p /usr/share/terminfo/x
cd /usr/share/terminfo/x
wget -q "${url}"
EOF

# go
FROM alpine AS pimp-my-shell-go
RUN <<EOF
set -eux
GO_VERSION=1.24.3
AARCH=$(uname -m)
AARCH=${AARCH/aarch64/arm64}
AARCH=${AARCH/x86_64/amd64}
AARCH=${AARCH/i386/386}
AARCH=${AARCH/i686/386}
wget -q https://go.dev/dl/go${GO_VERSION}.linux-${AARCH}.tar.gz -O go.tar.gz
tar -C /usr/local -xzf go.tar.gz
rm go.tar.gz;
EOF

# go - sysbox
FROM pimp-my-shell-go AS pimp-my-shell-go-sysbox
RUN <<EOF
set -eux
SYSBOX_VERSION=0.19.0
/usr/local/go/bin/go install github.com/skx/sysbox@release-${SYSBOX_VERSION}
EOF

# go - recur
FROM pimp-my-shell-go AS pimp-my-shell-go-recur
RUN <<EOF
set -eux
RECUR_VERSION=2.1.0
/usr/local/go/bin/go install dbohdan.com/recur/v2@v${RECUR_VERSION}
EOF

# tte
FROM $BASE_IMAGE AS pimp-my-shell-tte
SHELL ["/bin/bash", "-c"]
RUN <<EOF
set -eux
apt-get update
apt-get install -y --no-install-recommends pipx
TTE_VERSION=0.12.0
pipx install terminaltexteffects==${TTE_VERSION}
apt-get purge -y pipx
apt-get autoremove -y
rm -rf /var/lib/apt/lists/*
EOF
RUN <<EOF
# Change the shebang to /opt/terminaltexteffects which is where I am going to
# copy it
sed -i '1s|^#!/root/.local/pipx/venvs/terminaltexteffects/bin/python|#!/opt/terminaltexteffects/bin/python|' /root/.local/pipx/venvs/terminaltexteffects/bin/tte
EOF

# fd
FROM alpine AS pimp-my-shell-fd
RUN <<EOF
set -eux
FD_VERSION=10.2.0
AARCH=$(uname -m)
AARCH=${AARCH/i386/i686}
wget -q https://github.com/sharkdp/fd/releases/download/v${FD_VERSION}/fd-v${FD_VERSION}-${AARCH}-unknown-linux-musl.tar.gz -O- | tar -zx --strip-components=1 -C /opt
EOF

# bat
FROM alpine AS pimp-my-shell-bat
RUN <<EOF
set -eux
BAT_VERSION=0.25.0
AARCH=$(uname -m)
AARCH=${AARCH/i386/i686}
wget -q https://github.com/sharkdp/bat/releases/download/v${BAT_VERSION}/bat-v${BAT_VERSION}-${AARCH}-unknown-linux-musl.tar.gz -O- | tar -zx --strip-components=1 -C /opt
EOF

# rust
FROM $BASE_IMAGE AS pimp-my-shell-rust
SHELL ["/bin/bash", "-c"]
RUN <<EOF
set -eux
RUST_VERSION=1.86.0
curl -sSf https://sh.rustup.rs/ | sh -s -- --profile minimal --default-toolchain=${RUST_VERSION} -y
EOF

# lazygit
FROM alpine AS pimp-my-shell-lazygit
RUN <<EOF
set -eux
LAZYGIT_VERSION=0.50.0
AARCH=$(uname -m)
AARCH=${AARCH/aarch64/arm64}
AARCH=${AARCH/i386/32-bit}
AARCH=${AARCH/i686/32-bit}
wget -q https://github.com/jesseduffield/lazygit/releases/download/v${LAZYGIT_VERSION}/lazygit_${LAZYGIT_VERSION}_Linux_${AARCH}.tar.gz -O- | tar -zxf - -C /usr/local/bin
EOF

# ov
FROM alpine AS pimp-my-shell-ov
RUN <<EOF
set -eux
OV_VERSION=0.40.1
AARCH=$(uname -m)
AARCH=${AARCH/aarch64/arm64}
AARCH=${AARCH/x86_64/amd64}
AARCH=${AARCH/i386/386}
AARCH=${AARCH/i686/386}
wget -q https://github.com/noborus/ov/releases/download/v${OV_VERSION}/ov_${OV_VERSION}_linux_${AARCH}.zip -O ov.zip
unzip ov.zip -d /usr/local/bin/ ov
rm ov.zip
EOF

# bun
FROM $BASE_IMAGE AS pimp-my-shell-bun
SHELL ["/bin/bash", "-c"]
RUN <<EOF
set -eux
BUN_VERSION=1.2.12
curl -fsSL https://bun.sh/install | bash -s "bun-v${BUN_VERSION}"
cd /root/.bun/bin
ln -fs bun bunx
EOF

# gh
FROM alpine AS pimp-my-shell-gh
RUN <<EOF
set -eux
GH_VERSION=2.72.0
AARCH=$(uname -m)
AARCH=${AARCH/aarch64/arm64}
AARCH=${AARCH/x86_64/amd64}
AARCH=${AARCH/i386/386}
AARCH=${AARCH/i686/386}
wget -q https://github.com/cli/cli/releases/download/v${GH_VERSION}/gh_${GH_VERSION}_linux_${AARCH}.tar.gz -O- | tar -zxf - --strip-components=1 -C /opt
EOF

# delta
FROM alpine AS pimp-my-shell-delta
RUN <<EOF
set -eux
DELTA_VERSION=0.18.2
AARCH=$(uname -m)
wget -q https://github.com/dandavison/delta/releases/download/${DELTA_VERSION}/delta-${DELTA_VERSION}-${AARCH}-unknown-linux-gnu.tar.gz -O- | tar -zxf - --strip-components=1 -C /opt
EOF
